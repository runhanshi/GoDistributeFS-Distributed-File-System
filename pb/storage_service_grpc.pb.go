// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// StorageClient is the client API for Storage service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StorageClient interface {
	Initialize(ctx context.Context, in *InitializeArgs, opts ...grpc.CallOption) (*InitializeResult, error)
	CreateFile(ctx context.Context, in *CreateFileArgs, opts ...grpc.CallOption) (*CreateFileResult, error)
	ReadFile(ctx context.Context, in *ReadFileArgs, opts ...grpc.CallOption) (*ReadFileResult, error)
	WriteFile(ctx context.Context, in *WriteFileArgs, opts ...grpc.CallOption) (*WriteFileResult, error)
	Remove(ctx context.Context, in *RemoveArgs, opts ...grpc.CallOption) (*RemoveResult, error)
	GetFileInfo(ctx context.Context, in *GetFileInfoArgs, opts ...grpc.CallOption) (*GetFileInfoResult, error)
	Copy(ctx context.Context, in *CopyArgs, opts ...grpc.CallOption) (*CopyResult, error)
	Move(ctx context.Context, in *MoveArgs, opts ...grpc.CallOption) (*MoveResult, error)
}

type storageClient struct {
	cc grpc.ClientConnInterface
}

func NewStorageClient(cc grpc.ClientConnInterface) StorageClient {
	return &storageClient{cc}
}

func (c *storageClient) Initialize(ctx context.Context, in *InitializeArgs, opts ...grpc.CallOption) (*InitializeResult, error) {
	out := new(InitializeResult)
	err := c.cc.Invoke(ctx, "/pb.Storage/Initialize", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageClient) CreateFile(ctx context.Context, in *CreateFileArgs, opts ...grpc.CallOption) (*CreateFileResult, error) {
	out := new(CreateFileResult)
	err := c.cc.Invoke(ctx, "/pb.Storage/CreateFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageClient) ReadFile(ctx context.Context, in *ReadFileArgs, opts ...grpc.CallOption) (*ReadFileResult, error) {
	out := new(ReadFileResult)
	err := c.cc.Invoke(ctx, "/pb.Storage/ReadFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageClient) WriteFile(ctx context.Context, in *WriteFileArgs, opts ...grpc.CallOption) (*WriteFileResult, error) {
	out := new(WriteFileResult)
	err := c.cc.Invoke(ctx, "/pb.Storage/WriteFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageClient) Remove(ctx context.Context, in *RemoveArgs, opts ...grpc.CallOption) (*RemoveResult, error) {
	out := new(RemoveResult)
	err := c.cc.Invoke(ctx, "/pb.Storage/Remove", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageClient) GetFileInfo(ctx context.Context, in *GetFileInfoArgs, opts ...grpc.CallOption) (*GetFileInfoResult, error) {
	out := new(GetFileInfoResult)
	err := c.cc.Invoke(ctx, "/pb.Storage/GetFileInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageClient) Copy(ctx context.Context, in *CopyArgs, opts ...grpc.CallOption) (*CopyResult, error) {
	out := new(CopyResult)
	err := c.cc.Invoke(ctx, "/pb.Storage/Copy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageClient) Move(ctx context.Context, in *MoveArgs, opts ...grpc.CallOption) (*MoveResult, error) {
	out := new(MoveResult)
	err := c.cc.Invoke(ctx, "/pb.Storage/Move", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StorageServer is the server API for Storage service.
// All implementations must embed UnimplementedStorageServer
// for forward compatibility
type StorageServer interface {
	Initialize(context.Context, *InitializeArgs) (*InitializeResult, error)
	CreateFile(context.Context, *CreateFileArgs) (*CreateFileResult, error)
	ReadFile(context.Context, *ReadFileArgs) (*ReadFileResult, error)
	WriteFile(context.Context, *WriteFileArgs) (*WriteFileResult, error)
	Remove(context.Context, *RemoveArgs) (*RemoveResult, error)
	GetFileInfo(context.Context, *GetFileInfoArgs) (*GetFileInfoResult, error)
	Copy(context.Context, *CopyArgs) (*CopyResult, error)
	Move(context.Context, *MoveArgs) (*MoveResult, error)
	mustEmbedUnimplementedStorageServer()
}

// UnimplementedStorageServer must be embedded to have forward compatible implementations.
type UnimplementedStorageServer struct {
}

func (UnimplementedStorageServer) Initialize(context.Context, *InitializeArgs) (*InitializeResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Initialize not implemented")
}
func (UnimplementedStorageServer) CreateFile(context.Context, *CreateFileArgs) (*CreateFileResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateFile not implemented")
}
func (UnimplementedStorageServer) ReadFile(context.Context, *ReadFileArgs) (*ReadFileResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadFile not implemented")
}
func (UnimplementedStorageServer) WriteFile(context.Context, *WriteFileArgs) (*WriteFileResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WriteFile not implemented")
}
func (UnimplementedStorageServer) Remove(context.Context, *RemoveArgs) (*RemoveResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Remove not implemented")
}
func (UnimplementedStorageServer) GetFileInfo(context.Context, *GetFileInfoArgs) (*GetFileInfoResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFileInfo not implemented")
}
func (UnimplementedStorageServer) Copy(context.Context, *CopyArgs) (*CopyResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Copy not implemented")
}
func (UnimplementedStorageServer) Move(context.Context, *MoveArgs) (*MoveResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Move not implemented")
}
func (UnimplementedStorageServer) mustEmbedUnimplementedStorageServer() {}

// UnsafeStorageServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StorageServer will
// result in compilation errors.
type UnsafeStorageServer interface {
	mustEmbedUnimplementedStorageServer()
}

func RegisterStorageServer(s *grpc.Server, srv StorageServer) {
	s.RegisterService(&_Storage_serviceDesc, srv)
}

func _Storage_Initialize_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InitializeArgs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServer).Initialize(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Storage/Initialize",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServer).Initialize(ctx, req.(*InitializeArgs))
	}
	return interceptor(ctx, in, info, handler)
}

func _Storage_CreateFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateFileArgs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServer).CreateFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Storage/CreateFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServer).CreateFile(ctx, req.(*CreateFileArgs))
	}
	return interceptor(ctx, in, info, handler)
}

func _Storage_ReadFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadFileArgs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServer).ReadFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Storage/ReadFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServer).ReadFile(ctx, req.(*ReadFileArgs))
	}
	return interceptor(ctx, in, info, handler)
}

func _Storage_WriteFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WriteFileArgs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServer).WriteFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Storage/WriteFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServer).WriteFile(ctx, req.(*WriteFileArgs))
	}
	return interceptor(ctx, in, info, handler)
}

func _Storage_Remove_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveArgs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServer).Remove(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Storage/Remove",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServer).Remove(ctx, req.(*RemoveArgs))
	}
	return interceptor(ctx, in, info, handler)
}

func _Storage_GetFileInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFileInfoArgs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServer).GetFileInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Storage/GetFileInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServer).GetFileInfo(ctx, req.(*GetFileInfoArgs))
	}
	return interceptor(ctx, in, info, handler)
}

func _Storage_Copy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CopyArgs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServer).Copy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Storage/Copy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServer).Copy(ctx, req.(*CopyArgs))
	}
	return interceptor(ctx, in, info, handler)
}

func _Storage_Move_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MoveArgs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServer).Move(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Storage/Move",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServer).Move(ctx, req.(*MoveArgs))
	}
	return interceptor(ctx, in, info, handler)
}

var _Storage_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.Storage",
	HandlerType: (*StorageServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Initialize",
			Handler:    _Storage_Initialize_Handler,
		},
		{
			MethodName: "CreateFile",
			Handler:    _Storage_CreateFile_Handler,
		},
		{
			MethodName: "ReadFile",
			Handler:    _Storage_ReadFile_Handler,
		},
		{
			MethodName: "WriteFile",
			Handler:    _Storage_WriteFile_Handler,
		},
		{
			MethodName: "Remove",
			Handler:    _Storage_Remove_Handler,
		},
		{
			MethodName: "GetFileInfo",
			Handler:    _Storage_GetFileInfo_Handler,
		},
		{
			MethodName: "Copy",
			Handler:    _Storage_Copy_Handler,
		},
		{
			MethodName: "Move",
			Handler:    _Storage_Move_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "storage_service.proto",
}
